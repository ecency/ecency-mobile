import { Poll, PollChoice, PollStats, PollVoter } from './polls.types';

// conveter generated by ChatGPT
export const convertPoll = (rawData: any): Poll | null => {
  if (!rawData) return null;

  const {
    post_title,
    post_body,
    author,
    created,
    permlink,
    parent_permlink,
    tags,
    image,
    protocol_version,
    question,
    preferred_interpretation,
    token,
    end_time,
    status,
    max_choices_voted,
    filter_account_age_days,
    ui_hide_res_until_voted,
    platform,
    poll_trx_id,
    poll_choices,
    poll_voters,
    poll_stats,
  } = rawData;

  // Ensure required properties are present
  if (!end_time || !poll_choices) {
    return null;
  }

  // Parsing poll choices
  const parsedPollChoices: PollChoice[] = poll_choices.map((choice: any) => ({
    choice_num: choice.choice_num,
    choice_text: choice.choice_text,
    votes: {
      total_votes: choice.votes?.total_votes || 0,
      hive_hp: choice.votes?.hive_hp || 0,
      hive_proxied_hp: choice.votes?.hive_proxied_hp || 0,
      hive_hp_incl_proxied: choice.votes?.hive_hp_incl_proxied || 0,
    },
  }));

  // Parsing poll voters
  const parsedPollVoters: PollVoter[] = poll_voters
    ? poll_voters.map((voter: any) => ({
        name: voter.name,
        choices: voter.choices,
        hive_hp: voter.hive_hp || 0,
        hive_proxied_hp: voter.hive_proxied_hp || 0,
        hive_hp_incl_proxied: voter.hive_hp_incl_proxied || 0,
      }))
    : [];

  // Parsing poll stats
  const parsedPollStats: PollStats = {
    total_voting_accounts_num: poll_stats?.total_voting_accounts_num || 0,
    total_hive_hp: poll_stats?.total_hive_hp || 0,
    total_hive_proxied_hp: poll_stats?.total_hive_proxied_hp || 0,
    total_hive_hp_incl_proxied: poll_stats?.total_hive_hp_incl_proxied || 0,
  };

  // Constructing the parsed poll response
  const parsedResponse: Poll = {
    post_title: post_title || '',
    post_body: post_body || '',
    author,
    created,
    permlink,
    parent_permlink,
    tags: tags || [],
    image: image || [],
    protocol_version: protocol_version || 0,
    question,
    preferred_interpretation,
    token,
    end_time,
    status,
    max_choices_voted: max_choices_voted || 1,
    filter_account_age_days: filter_account_age_days || 0,
    //TODO: parse updated properties
    ui_hide_res_until_voted, // Assuming this field can be null, otherwise adjust accordingly
    platform, // Assuming this field can be null, otherwise adjust accordingly
    poll_trx_id,
    poll_choices: parsedPollChoices,
    poll_voters: parsedPollVoters,
    poll_stats: parsedPollStats,
  };

  return parsedResponse;
};

export const mapMetaChoicesToPollChoices = (metaChoices: string[]) => {
  if (!metaChoices) {
    return [] as PollChoice[];
  }

  return metaChoices.map(
    (choice, index) =>
      ({
        choice_num: index + 1,
        choice_text: choice,
        votes: {
          total_votes: 0,
          hive_hp: 0,
          hive_proxied_hp: 0,
          hive_hp_incl_proxied: 0,
        },
      } as PollChoice),
  );
};
